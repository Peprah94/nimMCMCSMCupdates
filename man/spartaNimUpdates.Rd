% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spartaUpdatingFunctions.R
\name{spartaNimUpdates}
\alias{spartaNimUpdates}
\title{Fit a full or reduced state-space model using either MCMC or SMC methods}
\usage{
spartaNimUpdates(
  model,
  reducedModel,
  MCMCconfiguration = NULL,
  pfType = NULL,
  pfControl = NULL,
  nParFiltRun = NULL,
  latent,
  postReducedMCMC,
  iNodeAll = TRUE,
  target = NULL,
  extraVars = NULL,
  mcmcScale = 1,
  propCov = "identity",
  propCov1 = "identity"
)
}
\arguments{
\item{model}{A NIMBLE model object, typically representing a state space model or a hidden Markov model.}

\item{reducedModel}{A NIMBLE model object, typically representing a state space model or a hidden Markov model for the reduced method.}

\item{MCMCconfiguration}{A list specifying the parameterisation for nimble's runMCMC function.}

\item{pfType}{The type of particle filter algorithm to fit. Defualts to 'bootstrap'.}

\item{pfControl}{A list specifying different control options for the particle filter. Options are described in the details section below.}

\item{nParFiltRun}{Number of particles for the particle filtering algorithm.}

\item{latent}{A character specifying which variable in the state-space model is the latent variable.}

\item{postReducedMCMC}{MCMC samples from the reduced model}

\item{iNodeAll}{A logical value indicating whether we want to copy all the years.}

\item{target}{A character specifying which variable is the target variable.}

\item{extraVars}{A character specifying which variable is the target variable.}

\item{mcmcScale}{A logical value indicating whether to fit the model with 'mcmc' or 'particle filter'. Defaults to TRUE.}

\item{propCov}{A character specifying which variable is the target variable.}

\item{propCov1}{A character specifying which variable is the target variable.}
}
\description{
Fit a given updated NIMBLE state space model.
}
\details{

}
\examples{
## For illustration only.
stateSpaceCode <- nimbleCode({
  x0 ~ dnorm(0, var = 1)
  x[1] ~ dnorm(a* x0, var = 1)
  y[1] ~ dnorm(x[1]*c, var = .5)
  for(t in 2:10){
    x[t] ~ dnorm(a * x[t-1], var = 1)
    y[t] ~ dnorm(x[t]*c, var = .5)
  }
})

model <- nimbleModel(code = exampleCode, data = list(y = rnorm(10)),
                     inits = list(x0 = 0, x = rnorm(10)))

 spartaNimUpdates(model,
 reducedModel,
 MCMCconfiguration = list(target = c('a', 'c'),
n.iter = 1000,
n.chains = 2,
n.burnin = 100,
n.thin = 2),
latent = "x",
mcmc = TRUE)


}
\seealso{
Other smc update methods: 
\code{\link{buildAuxiliaryFilterUpdate}},
\code{\link{buildBootstrapFilterUpdate}},
\code{\link{spartaNimWeights}()},
\code{\link{updateUtils}()}
}
\author{
Kwaku Peprah Adjei
}
\concept{smc update methods}
