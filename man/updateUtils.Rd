% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spartaUpdatingFunctions.R
\name{updateUtils}
\alias{updateUtils}
\title{Create a modelValue object for the MCMC object}
\usage{
updateUtils(
  model,
  reducedModel,
  mcmcOut,
  iNodeAll,
  latent,
  target,
  n.iter,
  m,
  timeIndex
)
}
\arguments{
\item{model}{A NIMBLE model object, typically representing a state space model or a hidden Markov model for the updated model we want to fit.}

\item{reducedModel}{A NIMBLE model object, typically representing a state space model or a hidden Markov model for the reduced model we fitted.}

\item{mcmcOut}{The MCMC object of class mcmc.}

\item{iNodeAll}{A logical value indicating whether we want to copy all the years.}

\item{latent}{A character specifying which variable in the state-space model is the latent variable.}

\item{target}{A character specifying which variable is the target variable.}

\item{n.iter}{A integer specifying the number of iterations we want to use for the updated model.}

\item{m}{An integer specifying the number of particles for the particle filter.}

\item{timeIndex}{An integer specifying which dimension of the data is the time component.}
}
\description{
Create a modelValue object for MCMC object.
}
\examples{
## For illustration only.
stateSpaceCode <- nimbleCode({
  x0 ~ dnorm(0, var = 1)
  x[1] ~ dnorm(a* x0, var = 1)
  y[1] ~ dnorm(x[1]*c, var = .5)
  for(t in 2:10){
    x[t] ~ dnorm(a * x[t-1], var = 1)
    y[t] ~ dnorm(x[t]*c, var = .5)
  }
})

model <- nimbleModel(code = exampleCode, data = list(y = rnorm(10)),
                     inits = list(x0 = 0, x = rnorm(10)))

 spartaNimWeights(model,
 MCMCconfiguration = list(target = c('a', 'c'),
n.iter = 1000,
n.chains = 2,
n.burnin = 100,
n.thin = 2),
latent = "x",
mcmc = TRUE)


}
\seealso{
Other smc update methods: 
\code{\link{buildAuxiliaryFilterUpdate}},
\code{\link{buildBootstrapFilterUpdate}},
\code{\link{spartaNimUpdates}()},
\code{\link{spartaNimWeights}()}
}
\author{
Kwaku Peprah Adjei

 This function provides an implementation to fit reduced models that can be used to
 update the model parameters and latent state distribution in the future i.e. fit the reduced
 model. It can also be used to fit the full model that can be compared to the
 reduced and updated models
}
\concept{smc update methods}
